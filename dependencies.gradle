/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 *  - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *  - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph
 */

dependencies {
    api("com.github.GTNewHorizons:NotEnoughItems:2.6.34-GTNH:dev")
    devOnlyNonPublishable("com.github.GTNewHorizons:EnderIO:2.8.17:dev")
    devOnlyNonPublishable(rfg.deobf("curse.maven:Infernal-Mobs-227875:2227584"))
    compileOnly("com.github.GTNewHorizons:BetterLoadingScreen:1.7.0-GTNH:dev") { transitive = false }
    compileOnly("thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:CraftTweaker:3.4.0:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Draconic-Evolution:1.3.9-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:TinkersConstruct:1.12.9-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:ThaumicHorizons:1.6.3:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:WirelessCraftingTerminal:1.11.6:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Hardcore-Ender-Expansion:1.11.2-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Botania:1.11.5-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:harvestcraft:1.2.1-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:OpenBlocks:1.10.1-GTNH:dev") { transitive = false }
    compileOnly('com.github.GTNewHorizons:OpenModsLib:0.11.1:dev') { transitive = false }
    compileOnly("com.github.GTNewHorizons:BloodArsenal:1.3.2:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:BloodMagic:1.6.3:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:ThaumicTinkerer:2.10.1:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:ForbiddenMagic:0.7.0-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Electro-Magic-Tools:1.5.12:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:WitchingGadgets:1.5.14-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:GT5-Unofficial:5.09.49.63:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:Hardcore-Ender-Expansion:1.11.2-GTNH:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:ForestryMC:4.9.10:dev") { transitive = false }
    compileOnly("com.github.GTNewHorizons:ThaumicBases:1.7.5:dev") { transitive = false }
    compileOnly(rfg.deobf("curse.maven:witchery-69673:2234410"))
    compileOnly(rfg.deobf("curse.maven:Automagy-222153:2285272"))
    compileOnly(rfg.deobf("curse.maven:edit-mob-drops-348932:4458014"))
    compileOnly(rfg.deobf("curse.maven:ChocoCraft-Plus-320646:3592082"))
    compileOnly(rfg.deobf("curse.maven:Lycanites-Mobs-224770:2268607"))
    compileOnly("curse.maven:CoFHCore-69162:2388751") // DEV JAR
    compileOnly("curse.maven:ExtraUtilities-225561:2264384") // DEOBF JAR
    compileOnly(rfg.deobf("curse.maven:JustAnotherSpawner-228952:2380961"))
    compileOnly(deobf("https://github.com/Roadhog360/Et-Futurum-Requiem/releases/download/2.5.1/Et_Futurum_Requiem-2.5.1+nomixin.jar", "Et Futurum Requiem"))

    compileOnly(rfg.deobf(project.files("libs/dqr.jar")))
}
